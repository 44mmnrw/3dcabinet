/* ================================================
   3Cabinet Configurator - Main Application
   ================================================ */

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const appState = {
  installedEquipment: [], // [{equipmentId, position, units}]
  draggedEquipment: null
};

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
let equipmentGrid, cabinetGrid, paramsContainer;

// ================================================
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
// ================================================
document.addEventListener('DOMContentLoaded', () => {
  initializeApp();
});

function initializeApp() {
  equipmentGrid = document.getElementById('equipment-grid');
  cabinetGrid = document.getElementById('cabinet-grid');
  paramsContainer = document.getElementById('parameters');

  renderCabinetInfo();
  renderEquipmentCatalog();
  renderCabinet();
  updateParameters();

  console.log('3Cabinet Configurator initialized');
}

// ================================================
// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∫–∞—Ñ–µ
// ================================================
function renderCabinetInfo() {
  const infoContainer = document.getElementById('cabinet-info');

  infoContainer.innerHTML = `
    <div class="info-grid">
      <div class="info-item">
        <div class="info-label">–¢–∏–ø</div>
        <div class="info-value">${CABINET_CONFIG.name}</div>
      </div>
      <div class="info-item">
        <div class="info-label">–Æ–Ω–∏—Ç—ã</div>
        <div class="info-value">${CABINET_CONFIG.units}U</div>
      </div>
      <div class="info-item">
        <div class="info-label">–†–∞–∑–º–µ—Ä</div>
        <div class="info-value">${CABINET_CONFIG.width}√ó${CABINET_CONFIG.depth} –º–º</div>
      </div>
      <div class="info-item">
        <div class="info-label">–ú–∞–∫—Å. –≤–µ—Å</div>
        <div class="info-value">${CABINET_CONFIG.maxWeight} –∫–≥</div>
      </div>
    </div>
  `;
}

// ================================================
// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞—Ç–∞–ª–æ–≥–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
// ================================================
function renderEquipmentCatalog() {
  equipmentGrid.innerHTML = EQUIPMENT_DATA.map(equipment => `
    <div class="equipment-card" 
         draggable="true"
         data-equipment-id="${equipment.id}"
         ondragstart="handleDragStart(event, ${equipment.id})"
         ondragend="handleDragEnd(event)">
      <div class="equipment-header">
        <div class="equipment-name">${equipment.name}</div>
        <div class="unit-badge">${equipment.units}U</div>
      </div>
      <div class="equipment-description">${equipment.description}</div>
      <div class="equipment-specs">
        <div class="spec-item">‚ö° ${equipment.power}W</div>
        <div class="spec-item">‚öñÔ∏è ${equipment.weight}–∫–≥</div>
        <div class="spec-item">üìè ${equipment.depth}–º–º</div>
      </div>
    </div>
  `).join('');
}

// ================================================
// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∫–∞—Ñ–∞
// ================================================
function renderCabinet() {
  const units = [];

  for (let i = CABINET_CONFIG.units; i >= 1; i--) {
    const installed = findEquipmentAtPosition(i);

    if (installed) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —é–Ω–∏—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
      if (i === installed.position + installed.units - 1) {
        units.push(createOccupiedUnit(i, installed));
      }
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —é–Ω–∏—Ç—ã —ç—Ç–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    } else {
      units.push(createEmptyUnit(i));
    }
  }

  cabinetGrid.innerHTML = units.join('');
}

function createEmptyUnit(unitNumber) {
  return `
    <div class="cabinet-unit empty" 
         data-unit="${unitNumber}"
         ondragover="handleDragOver(event)"
         ondragleave="handleDragLeave(event)"
         ondrop="handleDrop(event, ${unitNumber})">
      <div class="unit-number">${unitNumber}U</div>
    </div>
  `;
}

function createOccupiedUnit(unitNumber, installed) {
  const equipment = EQUIPMENT_DATA.find(e => e.id === installed.equipmentId);

  return `
    <div class="cabinet-unit occupied" 
         data-unit="${unitNumber}"
         style="grid-row: span ${installed.units}; min-height: ${installed.units * 20}px;"
         onclick="handleRemoveEquipment(${installed.equipmentId})">
      <div class="unit-number">${unitNumber}U</div>
      <div class="unit-equipment">${equipment.name} (${installed.units}U)</div>
      <button class="remove-btn" onclick="event.stopPropagation(); handleRemoveEquipment(${installed.equipmentId})">‚úï</button>
    </div>
  `;
}

// ================================================
// Drag & Drop handlers
// ================================================
function handleDragStart(event, equipmentId) {
  const equipment = EQUIPMENT_DATA.find(e => e.id === equipmentId);
  appState.draggedEquipment = equipment;
  event.currentTarget.classList.add('dragging');
  event.dataTransfer.effectAllowed = 'move';
}

function handleDragEnd(event) {
  event.currentTarget.classList.remove('dragging');
  appState.draggedEquipment = null;

  // –£–±–∏—Ä–∞–µ–º –≤—Å–µ highlight
  document.querySelectorAll('.cabinet-unit.drag-over').forEach(el => {
    el.classList.remove('drag-over');
  });
}

function handleDragOver(event) {
  event.preventDefault();
  event.dataTransfer.dropEffect = 'move';
  event.currentTarget.classList.add('drag-over');
}

function handleDragLeave(event) {
  event.currentTarget.classList.remove('drag-over');
}

function handleDrop(event, position) {
  event.preventDefault();
  event.currentTarget.classList.remove('drag-over');

  if (!appState.draggedEquipment) return;

  const equipment = appState.draggedEquipment;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
  if (canPlaceEquipment(position, equipment.units)) {
    installEquipment(equipment.id, position, equipment.units);
    showNotification(`${equipment.name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏—é ${position}U`, 'success');
  } else {
    showNotification('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏', 'error');
  }
}

// ================================================
// –õ–æ–≥–∏–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
// ================================================
function canPlaceEquipment(position, units) {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü
  if (position - units + 1 < 1) {
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
  for (let i = position; i > position - units; i--) {
    if (findEquipmentAtPosition(i)) {
      return false;
    }
  }

  return true;
}

function installEquipment(equipmentId, position, units) {
  appState.installedEquipment.push({
    equipmentId,
    position,
    units
  });

  renderCabinet();
  updateParameters();
}

function handleRemoveEquipment(equipmentId) {
  const equipment = EQUIPMENT_DATA.find(e => e.id === equipmentId);
  appState.installedEquipment = appState.installedEquipment.filter(
    e => e.equipmentId !== equipmentId
  );

  renderCabinet();
  updateParameters();
  showNotification(`${equipment.name} —É–¥–∞–ª–µ–Ω`, 'info');
}

function findEquipmentAtPosition(unitNumber) {
  return appState.installedEquipment.find(installed => {
    const start = installed.position - installed.units + 1;
    const end = installed.position;
    return unitNumber >= start && unitNumber <= end;
  });
}

// ================================================
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
// ================================================
function updateParameters() {
  const totalPower = calculateTotalPower();
  const totalWeight = calculateTotalWeight();
  const usedUnits = calculateUsedUnits();

  const powerPercent = (totalPower / CABINET_CONFIG.maxPower) * 100;
  const weightPercent = (totalWeight / CABINET_CONFIG.maxWeight) * 100;
  const unitsPercent = (usedUnits / CABINET_CONFIG.units) * 100;

  paramsContainer.innerHTML = `
    <div class="parameter-card">
      <div class="parameter-label">–≠–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ</div>
      <div class="parameter-value">${totalPower} / ${CABINET_CONFIG.maxPower} –í—Ç</div>
      <div class="progress-bar">
        <div class="progress-fill ${powerPercent > 80 ? 'warning' : ''}" 
             style="width: ${Math.min(powerPercent, 100)}%"></div>
      </div>
      <div class="parameter-detail">–†–µ–∑–µ—Ä–≤: ${CABINET_CONFIG.maxPower - totalPower} –í—Ç</div>
    </div>

    <div class="parameter-card">
      <div class="parameter-label">–ù–∞–≥—Ä—É–∑–∫–∞</div>
      <div class="parameter-value">${totalWeight} / ${CABINET_CONFIG.maxWeight} –∫–≥</div>
      <div class="progress-bar">
        <div class="progress-fill ${weightPercent > 80 ? 'warning' : ''}" 
             style="width: ${Math.min(weightPercent, 100)}%"></div>
      </div>
      <div class="parameter-detail">–†–µ–∑–µ—Ä–≤: ${CABINET_CONFIG.maxWeight - totalWeight} –∫–≥</div>
    </div>

    <div class="parameter-card">
      <div class="parameter-label">–ó–∞–Ω—è—Ç–æ—Å—Ç—å</div>
      <div class="parameter-value">${usedUnits} / ${CABINET_CONFIG.units} U</div>
      <div class="progress-bar">
        <div class="progress-fill ${unitsPercent > 80 ? 'warning' : ''}" 
             style="width: ${Math.min(unitsPercent, 100)}%"></div>
      </div>
      <div class="parameter-detail">–°–≤–æ–±–æ–¥–Ω–æ: ${CABINET_CONFIG.units - usedUnits} U</div>
    </div>
  `;
}

function calculateTotalPower() {
  return appState.installedEquipment.reduce((total, installed) => {
    const equipment = EQUIPMENT_DATA.find(e => e.id === installed.equipmentId);
    return total + equipment.power;
  }, 0);
}

function calculateTotalWeight() {
  return appState.installedEquipment.reduce((total, installed) => {
    const equipment = EQUIPMENT_DATA.find(e => e.id === installed.equipmentId);
    return total + equipment.weight;
  }, 0);
}

function calculateUsedUnits() {
  return appState.installedEquipment.reduce((total, installed) => {
    return total + installed.units;
  }, 0);
}

// ================================================
// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
// ================================================
function showNotification(message, type = 'info') {
  const notification = document.createElement('div');
  notification.className = `notification notification-${type}`;
  notification.textContent = message;
  notification.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    background: ${type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6'};
    color: white;
    padding: 1rem 1.5rem;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    z-index: 1000;
    animation: slideIn 0.3s ease;
  `;

  document.body.appendChild(notification);

  setTimeout(() => {
    notification.style.animation = 'slideOut 0.3s ease';
    setTimeout(() => notification.remove(), 300);
  }, 3000);
}

// –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const style = document.createElement('style');
style.textContent = `
  @keyframes slideIn {
    from { transform: translateX(400px); opacity: 0; }
    to { transform: translateX(0); opacity: 1; }
  }
  @keyframes slideOut {
    from { transform: translateX(0); opacity: 1; }
    to { transform: translateX(400px); opacity: 0; }
  }
`;
document.head.appendChild(style);
